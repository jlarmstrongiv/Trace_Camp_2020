{"version":3,"sources":["generated/apollo-components.tsx","components/Countries/Countries.js","components/Landmarks/Landmarks.js","components/Home/Home.js","components/NavBar/NavBar.js","components/Search/Search.js","components/App/App.js","index.js"],"names":["CountryOrderByInput","LandmarkOrderByInput","AllCountryNamesDocument","gql","AllLandmarkNamesDocument","LookupLInCountryDocument","Countries","baseOptions","ApolloReactHooks","data","loading","error","Jumbotron","style","maxHeight","target","rel","href","Button","variant","countries","map","cntry","Card","width","border","display","margin","Img","src","name","Body","Title","Landmarks","landmarks","ldmk","Home","React","useState","country","setCountry","class","Form","Group","controlId","maxWidth","Label","Control","type","placeholder","value","onChange","event","className","to","NavBar","children","exact","Navbar","bg","Brand","Nav","Link","inline","FormControl","Search","term","useParams","variables","Fragment","key","fontSizeAdjust","ldmrk","Text","city_name","App","path","component","client","ApolloClient","uri","process","root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f7910c1c.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  DateTime: any,\n};\n\nexport type AggregateCountry = {\n   __typename?: 'AggregateCountry',\n  count: Scalars['Int'],\n};\n\nexport type AggregateLandmark = {\n   __typename?: 'AggregateLandmark',\n  count: Scalars['Int'],\n};\n\nexport type Country = {\n   __typename?: 'Country',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  landmarks?: Maybe<Array<Landmark>>,\n};\n\n\nexport type CountryLandmarksArgs = {\n  where?: Maybe<LandmarkWhereInput>,\n  orderBy?: Maybe<LandmarkOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\nexport type CountryConnection = {\n   __typename?: 'CountryConnection',\n  pageInfo: PageInfo,\n  edges: Array<CountryEdge>,\n  aggregate: AggregateCountry,\n};\n\nexport type CountryEdge = {\n   __typename?: 'CountryEdge',\n  node: Country,\n  cursor: Scalars['String'],\n};\n\nexport enum CountryOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type CountryWhereInput = {\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  landmarks_every?: Maybe<LandmarkWhereInput>,\n  landmarks_some?: Maybe<LandmarkWhereInput>,\n  landmarks_none?: Maybe<LandmarkWhereInput>,\n  AND?: Maybe<Array<CountryWhereInput>>,\n  OR?: Maybe<Array<CountryWhereInput>>,\n  NOT?: Maybe<Array<CountryWhereInput>>,\n};\n\nexport type CountryWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>,\n};\n\n\nexport type Landmark = {\n   __typename?: 'Landmark',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  city_name: Scalars['String'],\n  rating?: Maybe<Scalars['Int']>,\n  country: Country,\n  LocationString?: Maybe<Scalars['String']>,\n};\n\nexport type LandmarkConnection = {\n   __typename?: 'LandmarkConnection',\n  pageInfo: PageInfo,\n  edges: Array<LandmarkEdge>,\n  aggregate: AggregateLandmark,\n};\n\nexport type LandmarkEdge = {\n   __typename?: 'LandmarkEdge',\n  node: Landmark,\n  cursor: Scalars['String'],\n};\n\nexport enum LandmarkOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  CityNameAsc = 'city_name_ASC',\n  CityNameDesc = 'city_name_DESC',\n  RatingAsc = 'rating_ASC',\n  RatingDesc = 'rating_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type LandmarkWhereInput = {\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  city_name?: Maybe<Scalars['String']>,\n  city_name_not?: Maybe<Scalars['String']>,\n  city_name_in?: Maybe<Array<Scalars['String']>>,\n  city_name_not_in?: Maybe<Array<Scalars['String']>>,\n  city_name_lt?: Maybe<Scalars['String']>,\n  city_name_lte?: Maybe<Scalars['String']>,\n  city_name_gt?: Maybe<Scalars['String']>,\n  city_name_gte?: Maybe<Scalars['String']>,\n  city_name_contains?: Maybe<Scalars['String']>,\n  city_name_not_contains?: Maybe<Scalars['String']>,\n  city_name_starts_with?: Maybe<Scalars['String']>,\n  city_name_not_starts_with?: Maybe<Scalars['String']>,\n  city_name_ends_with?: Maybe<Scalars['String']>,\n  city_name_not_ends_with?: Maybe<Scalars['String']>,\n  rating?: Maybe<Scalars['Int']>,\n  rating_not?: Maybe<Scalars['Int']>,\n  rating_in?: Maybe<Array<Scalars['Int']>>,\n  rating_not_in?: Maybe<Array<Scalars['Int']>>,\n  rating_lt?: Maybe<Scalars['Int']>,\n  rating_lte?: Maybe<Scalars['Int']>,\n  rating_gt?: Maybe<Scalars['Int']>,\n  rating_gte?: Maybe<Scalars['Int']>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  country?: Maybe<CountryWhereInput>,\n  AND?: Maybe<Array<LandmarkWhereInput>>,\n  OR?: Maybe<Array<LandmarkWhereInput>>,\n  NOT?: Maybe<Array<LandmarkWhereInput>>,\n};\n\nexport type LandmarkWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  deleteCountry?: Maybe<Country>,\n};\n\n\nexport type MutationDeleteCountryArgs = {\n  where: CountryWhereUniqueInput\n};\n\nexport type PageInfo = {\n   __typename?: 'PageInfo',\n  hasNextPage: Scalars['Boolean'],\n  hasPreviousPage: Scalars['Boolean'],\n  startCursor?: Maybe<Scalars['String']>,\n  endCursor?: Maybe<Scalars['String']>,\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  country?: Maybe<Country>,\n  countries: Array<Country>,\n  countriesConnection: CountryConnection,\n  landmark?: Maybe<Landmark>,\n  landmarks: Array<Landmark>,\n  landmarksConnection: LandmarkConnection,\n  fiveStar: Array<Landmark>,\n};\n\n\nexport type QueryCountryArgs = {\n  where: CountryWhereUniqueInput\n};\n\n\nexport type QueryCountriesArgs = {\n  where?: Maybe<CountryWhereInput>,\n  orderBy?: Maybe<CountryOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryCountriesConnectionArgs = {\n  where?: Maybe<CountryWhereInput>,\n  orderBy?: Maybe<CountryOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryLandmarkArgs = {\n  where: LandmarkWhereUniqueInput\n};\n\n\nexport type QueryLandmarksArgs = {\n  where?: Maybe<LandmarkWhereInput>,\n  orderBy?: Maybe<LandmarkOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryLandmarksConnectionArgs = {\n  where?: Maybe<LandmarkWhereInput>,\n  orderBy?: Maybe<LandmarkOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryFiveStarArgs = {\n  rating?: Maybe<Scalars['Int']>\n};\n\nexport type AllCountryNamesQueryVariables = {};\n\n\nexport type AllCountryNamesQuery = (\n  { __typename?: 'Query' }\n  & { countries: Array<(\n    { __typename?: 'Country' }\n    & Pick<Country, 'name'>\n  )> }\n);\n\nexport type AllLandmarkNamesQueryVariables = {};\n\n\nexport type AllLandmarkNamesQuery = (\n  { __typename?: 'Query' }\n  & { landmarks: Array<(\n    { __typename?: 'Landmark' }\n    & Pick<Landmark, 'name' | 'city_name'>\n  )> }\n);\n\nexport type LookupLInCountryQueryVariables = {\n  name: Scalars['String']\n};\n\n\nexport type LookupLInCountryQuery = (\n  { __typename?: 'Query' }\n  & { countries: Array<(\n    { __typename?: 'Country' }\n    & Pick<Country, 'name'>\n    & { landmarks: Maybe<Array<(\n      { __typename?: 'Landmark' }\n      & Pick<Landmark, 'name' | 'city_name'>\n    )>> }\n  )> }\n);\n\n\nexport const AllCountryNamesDocument = gql`\n    query AllCountryNames {\n  countries {\n    name\n  }\n}\n    `;\nexport type AllCountryNamesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllCountryNamesQuery, AllCountryNamesQueryVariables>, 'query'>;\n\n    export const AllCountryNamesComponent = (props: AllCountryNamesComponentProps) => (\n      <ApolloReactComponents.Query<AllCountryNamesQuery, AllCountryNamesQueryVariables> query={AllCountryNamesDocument} {...props} />\n    );\n    \nexport type AllCountryNamesProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllCountryNamesQuery, AllCountryNamesQueryVariables> | TChildProps;\nexport function withAllCountryNames<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  AllCountryNamesQuery,\n  AllCountryNamesQueryVariables,\n  AllCountryNamesProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, AllCountryNamesQuery, AllCountryNamesQueryVariables, AllCountryNamesProps<TChildProps>>(AllCountryNamesDocument, {\n      alias: 'allCountryNames',\n      ...operationOptions\n    });\n};\n\n/**\n * __useAllCountryNamesQuery__\n *\n * To run a query within a React component, call `useAllCountryNamesQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllCountryNamesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllCountryNamesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllCountryNamesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllCountryNamesQuery, AllCountryNamesQueryVariables>) {\n        return ApolloReactHooks.useQuery<AllCountryNamesQuery, AllCountryNamesQueryVariables>(AllCountryNamesDocument, baseOptions);\n      }\nexport function useAllCountryNamesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllCountryNamesQuery, AllCountryNamesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AllCountryNamesQuery, AllCountryNamesQueryVariables>(AllCountryNamesDocument, baseOptions);\n        }\nexport type AllCountryNamesQueryHookResult = ReturnType<typeof useAllCountryNamesQuery>;\nexport type AllCountryNamesLazyQueryHookResult = ReturnType<typeof useAllCountryNamesLazyQuery>;\nexport type AllCountryNamesQueryResult = ApolloReactCommon.QueryResult<AllCountryNamesQuery, AllCountryNamesQueryVariables>;\nexport const AllLandmarkNamesDocument = gql`\n    query AllLandmarkNames {\n  landmarks {\n    name\n    city_name\n  }\n}\n    `;\nexport type AllLandmarkNamesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<AllLandmarkNamesQuery, AllLandmarkNamesQueryVariables>, 'query'>;\n\n    export const AllLandmarkNamesComponent = (props: AllLandmarkNamesComponentProps) => (\n      <ApolloReactComponents.Query<AllLandmarkNamesQuery, AllLandmarkNamesQueryVariables> query={AllLandmarkNamesDocument} {...props} />\n    );\n    \nexport type AllLandmarkNamesProps<TChildProps = {}> = ApolloReactHoc.DataProps<AllLandmarkNamesQuery, AllLandmarkNamesQueryVariables> | TChildProps;\nexport function withAllLandmarkNames<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  AllLandmarkNamesQuery,\n  AllLandmarkNamesQueryVariables,\n  AllLandmarkNamesProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, AllLandmarkNamesQuery, AllLandmarkNamesQueryVariables, AllLandmarkNamesProps<TChildProps>>(AllLandmarkNamesDocument, {\n      alias: 'allLandmarkNames',\n      ...operationOptions\n    });\n};\n\n/**\n * __useAllLandmarkNamesQuery__\n *\n * To run a query within a React component, call `useAllLandmarkNamesQuery` and pass it any options that fit your needs.\n * When your component renders, `useAllLandmarkNamesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAllLandmarkNamesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useAllLandmarkNamesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AllLandmarkNamesQuery, AllLandmarkNamesQueryVariables>) {\n        return ApolloReactHooks.useQuery<AllLandmarkNamesQuery, AllLandmarkNamesQueryVariables>(AllLandmarkNamesDocument, baseOptions);\n      }\nexport function useAllLandmarkNamesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AllLandmarkNamesQuery, AllLandmarkNamesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<AllLandmarkNamesQuery, AllLandmarkNamesQueryVariables>(AllLandmarkNamesDocument, baseOptions);\n        }\nexport type AllLandmarkNamesQueryHookResult = ReturnType<typeof useAllLandmarkNamesQuery>;\nexport type AllLandmarkNamesLazyQueryHookResult = ReturnType<typeof useAllLandmarkNamesLazyQuery>;\nexport type AllLandmarkNamesQueryResult = ApolloReactCommon.QueryResult<AllLandmarkNamesQuery, AllLandmarkNamesQueryVariables>;\nexport const LookupLInCountryDocument = gql`\n    query LookupLInCountry($name: String!) {\n  countries(where: {name_contains: $name}) {\n    name\n    landmarks {\n      name\n      city_name\n    }\n  }\n}\n    `;\nexport type LookupLInCountryComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<LookupLInCountryQuery, LookupLInCountryQueryVariables>, 'query'> & ({ variables: LookupLInCountryQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const LookupLInCountryComponent = (props: LookupLInCountryComponentProps) => (\n      <ApolloReactComponents.Query<LookupLInCountryQuery, LookupLInCountryQueryVariables> query={LookupLInCountryDocument} {...props} />\n    );\n    \nexport type LookupLInCountryProps<TChildProps = {}> = ApolloReactHoc.DataProps<LookupLInCountryQuery, LookupLInCountryQueryVariables> | TChildProps;\nexport function withLookupLInCountry<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  LookupLInCountryQuery,\n  LookupLInCountryQueryVariables,\n  LookupLInCountryProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, LookupLInCountryQuery, LookupLInCountryQueryVariables, LookupLInCountryProps<TChildProps>>(LookupLInCountryDocument, {\n      alias: 'lookupLInCountry',\n      ...operationOptions\n    });\n};\n\n/**\n * __useLookupLInCountryQuery__\n *\n * To run a query within a React component, call `useLookupLInCountryQuery` and pass it any options that fit your needs.\n * When your component renders, `useLookupLInCountryQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLookupLInCountryQuery({\n *   variables: {\n *      name: // value for 'name'\n *   },\n * });\n */\nexport function useLookupLInCountryQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<LookupLInCountryQuery, LookupLInCountryQueryVariables>) {\n        return ApolloReactHooks.useQuery<LookupLInCountryQuery, LookupLInCountryQueryVariables>(LookupLInCountryDocument, baseOptions);\n      }\nexport function useLookupLInCountryLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<LookupLInCountryQuery, LookupLInCountryQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<LookupLInCountryQuery, LookupLInCountryQueryVariables>(LookupLInCountryDocument, baseOptions);\n        }\nexport type LookupLInCountryQueryHookResult = ReturnType<typeof useLookupLInCountryQuery>;\nexport type LookupLInCountryLazyQueryHookResult = ReturnType<typeof useLookupLInCountryLazyQuery>;\nexport type LookupLInCountryQueryResult = ApolloReactCommon.QueryResult<LookupLInCountryQuery, LookupLInCountryQueryVariables>;","import React from 'react'\nimport {useAllCountryNamesQuery} from '../../generated/apollo-components'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Button from 'react-bootstrap/Button'\nimport Card from 'react-bootstrap/Card'\n\nconst Countries = () => {\n    const { data, loading, error } = useAllCountryNamesQuery()\n    if(loading) return 'Loading...'\n    if(error) return 'Error'\n\n    return (\n        <div>\n            <Jumbotron style={{maxHeight: '250px'}}>\n                <h1>Countries</h1>\n                <p> This is a list of all countries with popular travel destinations. </p>\n                <p>\n                <a target=\"_blank\" rel='noopener noreferrer'\n                       href=\"https://en.wikipedia.org/wiki/Lists_of_countries_and_territories\">\n                        <Button variant=\"outline-primary\">More Information</Button>\n                    </a>\n\n                </p>\n            </Jumbotron>\n            {data.countries.map(cntry => (\n                <Card style={{width: '270px', border: 'dark', display: 'inline-block', margin: '30px'}}>\n                    <Card.Img variant=\"bottom\" src={`https://source.unsplash.com/600x400/?${cntry.name}`} />\n                    <Card.Body><Card.Title>{cntry.name}</Card.Title></Card.Body>\n                </Card>\n            ))}\n        </div>\n    )\n}\n\nexport default Countries","import React from 'react'\nimport {useAllLandmarkNamesQuery} from '../../generated/apollo-components'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Button from 'react-bootstrap/Button'\nimport Card from 'react-bootstrap/Card'\n\nconst Landmarks = () => {\n    const { data, loading, error } = useAllLandmarkNamesQuery()\n    if(loading) return 'Loading...'\n    if(error) return 'Error'\n\n    return (\n        <div>\n            <Jumbotron style={{maxHeight: '250px'}}>\n                <h1>Travel Destinations</h1>\n                <p>\n                    This is a list of popular travel destinations.  These include landmarks all over the world,\n                    stretching from the western United States to Japan.\n                </p>    \n                <p>\n                    <a target=\"_blank\" rel='noopener noreferrer'\n                       href=\"https://en.wikipedia.org/wiki/List_of_most_visited_palaces_and_monuments\">\n                        <Button variant=\"outline-primary\">More Information</Button>\n                    </a>\n                </p>\n            </Jumbotron>\n            {data.landmarks.map(ldmk => (\n                <Card style={{width: '270px', border: 'dark', display: 'inline-block', margin: '30px'}}>\n                <Card.Img variant=\"top\" src={`https://source.unsplash.com/600x400/?${ldmk.name}`} />\n                    <Card.Body>\n                        <Card.Title>{ldmk.name}</Card.Title>\n                    </Card.Body>\n                </Card>\n            ))}\n        </div>\n    )\n}\n\nexport default Landmarks","import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport {Link} from \"react-router-dom\";\nimport Card from 'react-bootstrap/Card'\n// import Image from 'components/App/Backgroud'\n\n// var sectionStyle = {\n//   bg: `url(${Image})`\n// }\n\nconst Home = () => {\n    const [country, setCountry] = React.useState('')\n    \n    return (\n      <div class='container'>\n        <center><br /><br /><br />\n        {/* <Figure>{sectionStyle}</Figure> */}\n        <h1>Destination Finder</h1>\n        <br /><br /><br />\n          <Card style={{width: '800px', display: 'inline-block'}}>\n            <Card.Body>\n              <Form.Group controlId=\"formBasicCountry\" style={{maxWidth: '500px'}}>\n              <Form.Label>Enter country to search for destinations.</Form.Label>\n              <Form.Control \n                type=\"none\" \n                placeholder=\"Country name here\" \n                value={country} \n                onChange={(event) => setCountry(event.target.value)}/>\n              </Form.Group>\n              <button type=\"button\" className=\"btn btn-outline-primary\">\n                <Link to={`/search/${country}`}>Search</Link>\n              </button>\n              <br /><br /><br /><br />\n            </Card.Body>\n          </Card>\n        </center>\n      </div>\n    )\n  };\n  \n  export default Home;","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button'\nimport FormControl from 'react-bootstrap/FormControl'\nimport {Link} from 'react-router-dom'\nimport {LinkContainer} from 'react-router-bootstrap';\n\nconst NavBar = ({ children, to, exact }) => {\n  const [country, setCountry] = React.useState('')\n  return (\n    <div>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"/\">Home</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <LinkContainer to=\"/all-countries\">\n            <Nav.Link>Countries</Nav.Link>\n          </LinkContainer>\n          <LinkContainer to=\"/all-landmarks\">\n            <Nav.Link>Destinations</Nav.Link>\n          </LinkContainer>\n        </Nav>\n        <Form inline>\n          <FormControl value={country} onChange={(event) => \n            setCountry(event.target.value)} type=\"text\" \n            placeholder=\"Search\" \n            className=\"mr-sm-2\" />\n          <Button variant=\"outline-info\"><Link to={`/search/${country}`}>Search</Link></Button>\n        </Form>\n      </Navbar>\n      <br />\n    </div>\n  )\n};\n\nexport default NavBar;","import React from 'react'\nimport {useLookupLInCountryQuery} from '../../generated/apollo-components'\nimport {useParams} from 'react-router-dom'\nimport Card from 'react-bootstrap/Card'\n\nconst Search = () => {\n    const {term} = useParams()\n    const { data, loading, error } = useLookupLInCountryQuery({\n        variables: {\n            name: term\n        }\n    })\n    if(loading) return 'Loading...'\n    if(error) return 'Error'\n\n    return ( \n        <div>\n            {data.countries.map(cntry => (\n                <React.Fragment key={cntry.name}>\n                    <h1 style={{maxHeight: '100px', maxWidth: '500px',\n                                fontSizeAdjust: '.35', margin: '30px', border: 'dark'}}>\n                        {cntry.name}\n                    </h1>\n                    {cntry.landmarks.map(ldmrk => (\n                        <Card key={ldmrk.name} \n                              style={{width: '270px', border: 'dark', display: 'inline-block', margin: '30px'}}>\n                            <Card.Img variant=\"bottom\" src={`https://source.unsplash.com/600x400/?${ldmrk.name}`} />\n                            <Card.Body>\n                                <Card.Title>{ldmrk.name}</Card.Title>\n                                <Card.Text>City: {ldmrk.city_name}</Card.Text>\n                            </Card.Body>\n                        </Card>\n                    ))}\n                </React.Fragment>\n            ))}\n        </div>\n    )\n}\n\nexport default Search","import React from 'react';\nimport {Switch, Route} from \"react-router-dom\";\nimport Countries from 'components/Countries/Countries';\nimport Landmarks from 'components/Landmarks/Landmarks';\nimport Home from 'components/Home/Home';\nimport NavBar from 'components/NavBar/NavBar';\nimport Search from 'components/Search/Search';\n\nconst App = () => {\n  return (\n    <div>\n      <title>Destination</title>\n\n      <NavBar />\n      <Switch>  \n        <Route exact path=\"/\" component={Home}></Route>\n        <Route exact path=\"/all-countries\" component={Countries}></Route>\n        <Route exact path=\"/all-landmarks\" component={Landmarks}></Route>\n        <Route exact path=\"/search/:term\" component={Search}></Route>\n      </Switch>\n    </div>\n  )\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App/App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst client = new ApolloClient({\n  uri: process.env.REACT_APP_APOLLO_SERVER || 'http://localhost:4000',\n});\n\nconst root = (\n  <Router>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </Router>\n);\n\nReactDOM.render(root, document.getElementById('root'));"],"sourceRoot":""}