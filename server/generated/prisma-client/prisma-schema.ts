// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateCountry {
  count: Int!
}

type AggregateLandmark {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Country {
  id: ID!
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  landmarks(where: LandmarkWhereInput, orderBy: LandmarkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Landmark!]
}

type CountryConnection {
  pageInfo: PageInfo!
  edges: [CountryEdge]!
  aggregate: AggregateCountry!
}

input CountryCreateInput {
  id: ID
  name: String!
  landmarks: LandmarkCreateManyWithoutCountryInput
}

input CountryCreateOneWithoutLandmarksInput {
  create: CountryCreateWithoutLandmarksInput
  connect: CountryWhereUniqueInput
}

input CountryCreateWithoutLandmarksInput {
  id: ID
  name: String!
}

type CountryEdge {
  node: Country!
  cursor: String!
}

enum CountryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CountryPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type CountrySubscriptionPayload {
  mutation: MutationType!
  node: Country
  updatedFields: [String!]
  previousValues: CountryPreviousValues
}

input CountrySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CountryWhereInput
  AND: [CountrySubscriptionWhereInput!]
  OR: [CountrySubscriptionWhereInput!]
  NOT: [CountrySubscriptionWhereInput!]
}

input CountryUpdateInput {
  name: String
  landmarks: LandmarkUpdateManyWithoutCountryInput
}

input CountryUpdateManyMutationInput {
  name: String
}

input CountryUpdateOneRequiredWithoutLandmarksInput {
  create: CountryCreateWithoutLandmarksInput
  update: CountryUpdateWithoutLandmarksDataInput
  upsert: CountryUpsertWithoutLandmarksInput
  connect: CountryWhereUniqueInput
}

input CountryUpdateWithoutLandmarksDataInput {
  name: String
}

input CountryUpsertWithoutLandmarksInput {
  update: CountryUpdateWithoutLandmarksDataInput!
  create: CountryCreateWithoutLandmarksInput!
}

input CountryWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  landmarks_every: LandmarkWhereInput
  landmarks_some: LandmarkWhereInput
  landmarks_none: LandmarkWhereInput
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
}

input CountryWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

type Landmark {
  id: ID!
  name: String!
  city_name: String!
  rating: Int
  createdAt: DateTime
  updatedAt: DateTime
  country: Country!
}

type LandmarkConnection {
  pageInfo: PageInfo!
  edges: [LandmarkEdge]!
  aggregate: AggregateLandmark!
}

input LandmarkCreateInput {
  id: ID
  name: String!
  city_name: String!
  rating: Int
  country: CountryCreateOneWithoutLandmarksInput!
}

input LandmarkCreateManyWithoutCountryInput {
  create: [LandmarkCreateWithoutCountryInput!]
  connect: [LandmarkWhereUniqueInput!]
}

input LandmarkCreateWithoutCountryInput {
  id: ID
  name: String!
  city_name: String!
  rating: Int
}

type LandmarkEdge {
  node: Landmark!
  cursor: String!
}

enum LandmarkOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  city_name_ASC
  city_name_DESC
  rating_ASC
  rating_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LandmarkPreviousValues {
  id: ID!
  name: String!
  city_name: String!
  rating: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input LandmarkScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  city_name: String
  city_name_not: String
  city_name_in: [String!]
  city_name_not_in: [String!]
  city_name_lt: String
  city_name_lte: String
  city_name_gt: String
  city_name_gte: String
  city_name_contains: String
  city_name_not_contains: String
  city_name_starts_with: String
  city_name_not_starts_with: String
  city_name_ends_with: String
  city_name_not_ends_with: String
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [LandmarkScalarWhereInput!]
  OR: [LandmarkScalarWhereInput!]
  NOT: [LandmarkScalarWhereInput!]
}

type LandmarkSubscriptionPayload {
  mutation: MutationType!
  node: Landmark
  updatedFields: [String!]
  previousValues: LandmarkPreviousValues
}

input LandmarkSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LandmarkWhereInput
  AND: [LandmarkSubscriptionWhereInput!]
  OR: [LandmarkSubscriptionWhereInput!]
  NOT: [LandmarkSubscriptionWhereInput!]
}

input LandmarkUpdateInput {
  name: String
  city_name: String
  rating: Int
  country: CountryUpdateOneRequiredWithoutLandmarksInput
}

input LandmarkUpdateManyDataInput {
  name: String
  city_name: String
  rating: Int
}

input LandmarkUpdateManyMutationInput {
  name: String
  city_name: String
  rating: Int
}

input LandmarkUpdateManyWithoutCountryInput {
  create: [LandmarkCreateWithoutCountryInput!]
  delete: [LandmarkWhereUniqueInput!]
  connect: [LandmarkWhereUniqueInput!]
  set: [LandmarkWhereUniqueInput!]
  disconnect: [LandmarkWhereUniqueInput!]
  update: [LandmarkUpdateWithWhereUniqueWithoutCountryInput!]
  upsert: [LandmarkUpsertWithWhereUniqueWithoutCountryInput!]
  deleteMany: [LandmarkScalarWhereInput!]
  updateMany: [LandmarkUpdateManyWithWhereNestedInput!]
}

input LandmarkUpdateManyWithWhereNestedInput {
  where: LandmarkScalarWhereInput!
  data: LandmarkUpdateManyDataInput!
}

input LandmarkUpdateWithoutCountryDataInput {
  name: String
  city_name: String
  rating: Int
}

input LandmarkUpdateWithWhereUniqueWithoutCountryInput {
  where: LandmarkWhereUniqueInput!
  data: LandmarkUpdateWithoutCountryDataInput!
}

input LandmarkUpsertWithWhereUniqueWithoutCountryInput {
  where: LandmarkWhereUniqueInput!
  update: LandmarkUpdateWithoutCountryDataInput!
  create: LandmarkCreateWithoutCountryInput!
}

input LandmarkWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  city_name: String
  city_name_not: String
  city_name_in: [String!]
  city_name_not_in: [String!]
  city_name_lt: String
  city_name_lte: String
  city_name_gt: String
  city_name_gte: String
  city_name_contains: String
  city_name_not_contains: String
  city_name_starts_with: String
  city_name_not_starts_with: String
  city_name_ends_with: String
  city_name_not_ends_with: String
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  country: CountryWhereInput
  AND: [LandmarkWhereInput!]
  OR: [LandmarkWhereInput!]
  NOT: [LandmarkWhereInput!]
}

input LandmarkWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCountry(data: CountryCreateInput!): Country!
  updateCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country
  updateManyCountries(data: CountryUpdateManyMutationInput!, where: CountryWhereInput): BatchPayload!
  upsertCountry(where: CountryWhereUniqueInput!, create: CountryCreateInput!, update: CountryUpdateInput!): Country!
  deleteCountry(where: CountryWhereUniqueInput!): Country
  deleteManyCountries(where: CountryWhereInput): BatchPayload!
  createLandmark(data: LandmarkCreateInput!): Landmark!
  updateLandmark(data: LandmarkUpdateInput!, where: LandmarkWhereUniqueInput!): Landmark
  updateManyLandmarks(data: LandmarkUpdateManyMutationInput!, where: LandmarkWhereInput): BatchPayload!
  upsertLandmark(where: LandmarkWhereUniqueInput!, create: LandmarkCreateInput!, update: LandmarkUpdateInput!): Landmark!
  deleteLandmark(where: LandmarkWhereUniqueInput!): Landmark
  deleteManyLandmarks(where: LandmarkWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  country(where: CountryWhereUniqueInput!): Country
  countries(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Country]!
  countriesConnection(where: CountryWhereInput, orderBy: CountryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CountryConnection!
  landmark(where: LandmarkWhereUniqueInput!): Landmark
  landmarks(where: LandmarkWhereInput, orderBy: LandmarkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Landmark]!
  landmarksConnection(where: LandmarkWhereInput, orderBy: LandmarkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LandmarkConnection!
  node(id: ID!): Node
}

type Subscription {
  country(where: CountrySubscriptionWhereInput): CountrySubscriptionPayload
  landmark(where: LandmarkSubscriptionWhereInput): LandmarkSubscriptionPayload
}
`