### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type AggregateCountry {
  count: Int!
}

type AggregateLandmark {
  count: Int!
}

type Country {
  id: ID!
  landmarks(after: String, before: String, first: Int, last: Int, orderBy: LandmarkOrderByInput, skip: Int, where: LandmarkWhereInput): [Landmark!]
  name: String!
}

type CountryConnection {
  aggregate: AggregateCountry!
  edges: [CountryEdge!]!
  pageInfo: PageInfo!
}

type CountryEdge {
  cursor: String!
  node: Country!
}

enum CountryOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  landmarks_every: LandmarkWhereInput
  landmarks_none: LandmarkWhereInput
  landmarks_some: LandmarkWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input CountryWhereUniqueInput {
  id: ID
  name: String
}

scalar DateTime

type Landmark {
  city_name: String!
  country: Country!
  id: ID!
  LocationString: String
  name: String!
  rating: Int
}

type LandmarkConnection {
  aggregate: AggregateLandmark!
  edges: [LandmarkEdge!]!
  pageInfo: PageInfo!
}

type LandmarkEdge {
  cursor: String!
  node: Landmark!
}

enum LandmarkOrderByInput {
  city_name_ASC
  city_name_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  rating_ASC
  rating_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input LandmarkWhereInput {
  AND: [LandmarkWhereInput!]
  city_name: String
  city_name_contains: String
  city_name_ends_with: String
  city_name_gt: String
  city_name_gte: String
  city_name_in: [String!]
  city_name_lt: String
  city_name_lte: String
  city_name_not: String
  city_name_not_contains: String
  city_name_not_ends_with: String
  city_name_not_in: [String!]
  city_name_not_starts_with: String
  city_name_starts_with: String
  country: CountryWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [LandmarkWhereInput!]
  OR: [LandmarkWhereInput!]
  rating: Int
  rating_gt: Int
  rating_gte: Int
  rating_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_not: Int
  rating_not_in: [Int!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input LandmarkWhereUniqueInput {
  id: ID
}

type Mutation {
  deleteCountry(where: CountryWhereUniqueInput!): Country
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  countries(after: String, before: String, first: Int, last: Int, orderBy: CountryOrderByInput, skip: Int, where: CountryWhereInput): [Country!]!
  countriesConnection(after: String, before: String, first: Int, last: Int, orderBy: CountryOrderByInput, skip: Int, where: CountryWhereInput): CountryConnection!
  country(where: CountryWhereUniqueInput!): Country
  fiveStar(
    """Rating of the location"""
    rating: Int = 5
  ): [Landmark!]!
  landmark(where: LandmarkWhereUniqueInput!): Landmark
  landmarks(after: String, before: String, first: Int, last: Int, orderBy: LandmarkOrderByInput, skip: Int, where: LandmarkWhereInput): [Landmark!]!
  landmarksConnection(after: String, before: String, first: Int, last: Int, orderBy: LandmarkOrderByInput, skip: Int, where: LandmarkWhereInput): LandmarkConnection!
}
