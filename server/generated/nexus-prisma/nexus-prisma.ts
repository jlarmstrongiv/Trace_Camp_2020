/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../../generedated/prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Country: CountryObject
      Landmark: LandmarkObject
      CountryConnection: CountryConnectionObject
      PageInfo: PageInfoObject
      CountryEdge: CountryEdgeObject
      AggregateCountry: AggregateCountryObject
      LandmarkConnection: LandmarkConnectionObject
      LandmarkEdge: LandmarkEdgeObject
      AggregateLandmark: AggregateLandmarkObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      CountrySubscriptionPayload: CountrySubscriptionPayloadObject
      CountryPreviousValues: CountryPreviousValuesObject
      LandmarkSubscriptionPayload: LandmarkSubscriptionPayloadObject
      LandmarkPreviousValues: LandmarkPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Country: CountryFieldDetails
      Landmark: LandmarkFieldDetails
      CountryConnection: CountryConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      CountryEdge: CountryEdgeFieldDetails
      AggregateCountry: AggregateCountryFieldDetails
      LandmarkConnection: LandmarkConnectionFieldDetails
      LandmarkEdge: LandmarkEdgeFieldDetails
      AggregateLandmark: AggregateLandmarkFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      CountrySubscriptionPayload: CountrySubscriptionPayloadFieldDetails
      CountryPreviousValues: CountryPreviousValuesFieldDetails
      LandmarkSubscriptionPayload: LandmarkSubscriptionPayloadFieldDetails
      LandmarkPreviousValues: LandmarkPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      CountryWhereUniqueInput: CountryWhereUniqueInputInputObject
      LandmarkWhereInput: LandmarkWhereInputInputObject
      CountryWhereInput: CountryWhereInputInputObject
      LandmarkWhereUniqueInput: LandmarkWhereUniqueInputInputObject
      CountryCreateInput: CountryCreateInputInputObject
      LandmarkCreateManyWithoutCountryInput: LandmarkCreateManyWithoutCountryInputInputObject
      LandmarkCreateWithoutCountryInput: LandmarkCreateWithoutCountryInputInputObject
      CountryUpdateInput: CountryUpdateInputInputObject
      LandmarkUpdateManyWithoutCountryInput: LandmarkUpdateManyWithoutCountryInputInputObject
      LandmarkUpdateWithWhereUniqueWithoutCountryInput: LandmarkUpdateWithWhereUniqueWithoutCountryInputInputObject
      LandmarkUpdateWithoutCountryDataInput: LandmarkUpdateWithoutCountryDataInputInputObject
      LandmarkUpsertWithWhereUniqueWithoutCountryInput: LandmarkUpsertWithWhereUniqueWithoutCountryInputInputObject
      LandmarkScalarWhereInput: LandmarkScalarWhereInputInputObject
      LandmarkUpdateManyWithWhereNestedInput: LandmarkUpdateManyWithWhereNestedInputInputObject
      LandmarkUpdateManyDataInput: LandmarkUpdateManyDataInputInputObject
      CountryUpdateManyMutationInput: CountryUpdateManyMutationInputInputObject
      LandmarkCreateInput: LandmarkCreateInputInputObject
      CountryCreateOneWithoutLandmarksInput: CountryCreateOneWithoutLandmarksInputInputObject
      CountryCreateWithoutLandmarksInput: CountryCreateWithoutLandmarksInputInputObject
      LandmarkUpdateInput: LandmarkUpdateInputInputObject
      CountryUpdateOneRequiredWithoutLandmarksInput: CountryUpdateOneRequiredWithoutLandmarksInputInputObject
      CountryUpdateWithoutLandmarksDataInput: CountryUpdateWithoutLandmarksDataInputInputObject
      CountryUpsertWithoutLandmarksInput: CountryUpsertWithoutLandmarksInputInputObject
      LandmarkUpdateManyMutationInput: LandmarkUpdateManyMutationInputInputObject
      CountrySubscriptionWhereInput: CountrySubscriptionWhereInputInputObject
      LandmarkSubscriptionWhereInput: LandmarkSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    LandmarkOrderByInput: LandmarkOrderByInputValues,
    CountryOrderByInput: CountryOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'country', args?: QueryCountryArgs[] | false, alias?: string  } 
  | { name: 'countries', args?: QueryCountriesArgs[] | false, alias?: string  } 
  | { name: 'countriesConnection', args?: QueryCountriesConnectionArgs[] | false, alias?: string  } 
  | { name: 'landmark', args?: QueryLandmarkArgs[] | false, alias?: string  } 
  | { name: 'landmarks', args?: QueryLandmarksArgs[] | false, alias?: string  } 
  | { name: 'landmarksConnection', args?: QueryLandmarksConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'country'
  | 'countries'
  | 'countriesConnection'
  | 'landmark'
  | 'landmarks'
  | 'landmarksConnection'


type QueryCountryArgs =
  | 'where'
type QueryCountriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCountriesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLandmarkArgs =
  | 'where'
type QueryLandmarksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLandmarksConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  country: {
    type: 'Country'
    args: Record<QueryCountryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CountryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country | null> | prisma.Country | null
  }
  countries: {
    type: 'Country'
    args: Record<QueryCountriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CountryWhereInput | null, orderBy?: prisma.CountryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country[]> | prisma.Country[]
  }
  countriesConnection: {
    type: 'CountryConnection'
    args: Record<QueryCountriesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CountryWhereInput | null, orderBy?: prisma.CountryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CountryConnection> | prisma.CountryConnection
  }
  landmark: {
    type: 'Landmark'
    args: Record<QueryLandmarkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: LandmarkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Landmark | null> | prisma.Landmark | null
  }
  landmarks: {
    type: 'Landmark'
    args: Record<QueryLandmarksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LandmarkWhereInput | null, orderBy?: prisma.LandmarkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Landmark[]> | prisma.Landmark[]
  }
  landmarksConnection: {
    type: 'LandmarkConnection'
    args: Record<QueryLandmarksConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LandmarkWhereInput | null, orderBy?: prisma.LandmarkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LandmarkConnection> | prisma.LandmarkConnection
  }
}
  

// Types for Country

type CountryObject =
  | CountryFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'landmarks', args?: CountryLandmarksArgs[] | false, alias?: string  } 

type CountryFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'
  | 'landmarks'


type CountryLandmarksArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface CountryFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  landmarks: {
    type: 'Landmark'
    args: Record<CountryLandmarksArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Country">,
      args: { where?: LandmarkWhereInput | null, orderBy?: prisma.LandmarkOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Landmark[]> | prisma.Landmark[]
  }
}
  

// Types for Landmark

type LandmarkObject =
  | LandmarkFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'city_name', args?: [] | false, alias?: string  } 
  | { name: 'rating', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'country', args?: [] | false, alias?: string  } 

type LandmarkFields =
  | 'id'
  | 'name'
  | 'city_name'
  | 'rating'
  | 'createdAt'
  | 'updatedAt'
  | 'country'



  

export interface LandmarkFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  city_name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  rating: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  country: {
    type: 'Country'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Landmark">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country> | prisma.Country
  }
}
  

// Types for CountryConnection

type CountryConnectionObject =
  | CountryConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CountryConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CountryConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CountryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CountryEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CountryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CountryEdge[]> | prisma.CountryEdge[]
  }
  aggregate: {
    type: 'AggregateCountry'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CountryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCountry> | prisma.AggregateCountry
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for CountryEdge

type CountryEdgeObject =
  | CountryEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CountryEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CountryEdgeFieldDetails {
  node: {
    type: 'Country'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CountryEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country> | prisma.Country
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCountry

type AggregateCountryObject =
  | AggregateCountryFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCountryFields =
  | 'count'



  

export interface AggregateCountryFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for LandmarkConnection

type LandmarkConnectionObject =
  | LandmarkConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type LandmarkConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface LandmarkConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LandmarkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'LandmarkEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"LandmarkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LandmarkEdge[]> | prisma.LandmarkEdge[]
  }
  aggregate: {
    type: 'AggregateLandmark'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LandmarkConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateLandmark> | prisma.AggregateLandmark
  }
}
  

// Types for LandmarkEdge

type LandmarkEdgeObject =
  | LandmarkEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type LandmarkEdgeFields =
  | 'node'
  | 'cursor'



  

export interface LandmarkEdgeFieldDetails {
  node: {
    type: 'Landmark'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LandmarkEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Landmark> | prisma.Landmark
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateLandmark

type AggregateLandmarkObject =
  | AggregateLandmarkFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateLandmarkFields =
  | 'count'



  

export interface AggregateLandmarkFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createCountry', args?: MutationCreateCountryArgs[] | false, alias?: string  } 
  | { name: 'updateCountry', args?: MutationUpdateCountryArgs[] | false, alias?: string  } 
  | { name: 'updateManyCountries', args?: MutationUpdateManyCountriesArgs[] | false, alias?: string  } 
  | { name: 'upsertCountry', args?: MutationUpsertCountryArgs[] | false, alias?: string  } 
  | { name: 'deleteCountry', args?: MutationDeleteCountryArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCountries', args?: MutationDeleteManyCountriesArgs[] | false, alias?: string  } 
  | { name: 'createLandmark', args?: MutationCreateLandmarkArgs[] | false, alias?: string  } 
  | { name: 'updateLandmark', args?: MutationUpdateLandmarkArgs[] | false, alias?: string  } 
  | { name: 'updateManyLandmarks', args?: MutationUpdateManyLandmarksArgs[] | false, alias?: string  } 
  | { name: 'upsertLandmark', args?: MutationUpsertLandmarkArgs[] | false, alias?: string  } 
  | { name: 'deleteLandmark', args?: MutationDeleteLandmarkArgs[] | false, alias?: string  } 
  | { name: 'deleteManyLandmarks', args?: MutationDeleteManyLandmarksArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createCountry'
  | 'updateCountry'
  | 'updateManyCountries'
  | 'upsertCountry'
  | 'deleteCountry'
  | 'deleteManyCountries'
  | 'createLandmark'
  | 'updateLandmark'
  | 'updateManyLandmarks'
  | 'upsertLandmark'
  | 'deleteLandmark'
  | 'deleteManyLandmarks'


type MutationCreateCountryArgs =
  | 'data'
type MutationUpdateCountryArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCountriesArgs =
  | 'data'
  | 'where'
type MutationUpsertCountryArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCountryArgs =
  | 'where'
type MutationDeleteManyCountriesArgs =
  | 'where'
type MutationCreateLandmarkArgs =
  | 'data'
type MutationUpdateLandmarkArgs =
  | 'data'
  | 'where'
type MutationUpdateManyLandmarksArgs =
  | 'data'
  | 'where'
type MutationUpsertLandmarkArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteLandmarkArgs =
  | 'where'
type MutationDeleteManyLandmarksArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createCountry: {
    type: 'Country'
    args: Record<MutationCreateCountryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CountryCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country> | prisma.Country
  }
  updateCountry: {
    type: 'Country'
    args: Record<MutationUpdateCountryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CountryUpdateInput, where: CountryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country | null> | prisma.Country | null
  }
  updateManyCountries: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCountriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CountryUpdateManyMutationInput, where?: CountryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCountry: {
    type: 'Country'
    args: Record<MutationUpsertCountryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CountryWhereUniqueInput, create: CountryCreateInput, update: CountryUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country> | prisma.Country
  }
  deleteCountry: {
    type: 'Country'
    args: Record<MutationDeleteCountryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CountryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country | null> | prisma.Country | null
  }
  deleteManyCountries: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCountriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CountryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createLandmark: {
    type: 'Landmark'
    args: Record<MutationCreateLandmarkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LandmarkCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Landmark> | prisma.Landmark
  }
  updateLandmark: {
    type: 'Landmark'
    args: Record<MutationUpdateLandmarkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LandmarkUpdateInput, where: LandmarkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Landmark | null> | prisma.Landmark | null
  }
  updateManyLandmarks: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyLandmarksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LandmarkUpdateManyMutationInput, where?: LandmarkWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertLandmark: {
    type: 'Landmark'
    args: Record<MutationUpsertLandmarkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LandmarkWhereUniqueInput, create: LandmarkCreateInput, update: LandmarkUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Landmark> | prisma.Landmark
  }
  deleteLandmark: {
    type: 'Landmark'
    args: Record<MutationDeleteLandmarkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LandmarkWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Landmark | null> | prisma.Landmark | null
  }
  deleteManyLandmarks: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyLandmarksArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: LandmarkWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'country', args?: SubscriptionCountryArgs[] | false, alias?: string  } 
  | { name: 'landmark', args?: SubscriptionLandmarkArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'country'
  | 'landmark'


type SubscriptionCountryArgs =
  | 'where'
type SubscriptionLandmarkArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  country: {
    type: 'CountrySubscriptionPayload'
    args: Record<SubscriptionCountryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CountrySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CountrySubscriptionPayload | null> | prisma.CountrySubscriptionPayload | null
  }
  landmark: {
    type: 'LandmarkSubscriptionPayload'
    args: Record<SubscriptionLandmarkArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: LandmarkSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LandmarkSubscriptionPayload | null> | prisma.LandmarkSubscriptionPayload | null
  }
}
  

// Types for CountrySubscriptionPayload

type CountrySubscriptionPayloadObject =
  | CountrySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CountrySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CountrySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CountrySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Country'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CountrySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Country | null> | prisma.Country | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CountryPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CountrySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CountryPreviousValues | null> | prisma.CountryPreviousValues | null
  }
}
  

// Types for CountryPreviousValues

type CountryPreviousValuesObject =
  | CountryPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CountryPreviousValuesFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface CountryPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for LandmarkSubscriptionPayload

type LandmarkSubscriptionPayloadObject =
  | LandmarkSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type LandmarkSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface LandmarkSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LandmarkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Landmark'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LandmarkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Landmark | null> | prisma.Landmark | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'LandmarkPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LandmarkSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LandmarkPreviousValues | null> | prisma.LandmarkPreviousValues | null
  }
}
  

// Types for LandmarkPreviousValues

type LandmarkPreviousValuesObject =
  | LandmarkPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'city_name', args?: [] | false, alias?: string  } 
  | { name: 'rating', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type LandmarkPreviousValuesFields =
  | 'id'
  | 'name'
  | 'city_name'
  | 'rating'
  | 'createdAt'
  | 'updatedAt'



  

export interface LandmarkPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  city_name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  rating: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  


export interface CountryWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type CountryWhereUniqueInputInputObject =
  | Extract<keyof CountryWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface LandmarkWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  city_name?: string | null
  city_name_not?: string | null
  city_name_in?: string[]
  city_name_not_in?: string[]
  city_name_lt?: string | null
  city_name_lte?: string | null
  city_name_gt?: string | null
  city_name_gte?: string | null
  city_name_contains?: string | null
  city_name_not_contains?: string | null
  city_name_starts_with?: string | null
  city_name_not_starts_with?: string | null
  city_name_ends_with?: string | null
  city_name_not_ends_with?: string | null
  rating?: number | null
  rating_not?: number | null
  rating_in?: number[]
  rating_not_in?: number[]
  rating_lt?: number | null
  rating_lte?: number | null
  rating_gt?: number | null
  rating_gte?: number | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  country?: CountryWhereInput | null
  AND?: LandmarkWhereInput[]
  OR?: LandmarkWhereInput[]
  NOT?: LandmarkWhereInput[]
}
export type LandmarkWhereInputInputObject =
  | Extract<keyof LandmarkWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'city_name', alias?: string  } 
  | { name: 'city_name_not', alias?: string  } 
  | { name: 'city_name_in', alias?: string  } 
  | { name: 'city_name_not_in', alias?: string  } 
  | { name: 'city_name_lt', alias?: string  } 
  | { name: 'city_name_lte', alias?: string  } 
  | { name: 'city_name_gt', alias?: string  } 
  | { name: 'city_name_gte', alias?: string  } 
  | { name: 'city_name_contains', alias?: string  } 
  | { name: 'city_name_not_contains', alias?: string  } 
  | { name: 'city_name_starts_with', alias?: string  } 
  | { name: 'city_name_not_starts_with', alias?: string  } 
  | { name: 'city_name_ends_with', alias?: string  } 
  | { name: 'city_name_not_ends_with', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'rating_not', alias?: string  } 
  | { name: 'rating_in', alias?: string  } 
  | { name: 'rating_not_in', alias?: string  } 
  | { name: 'rating_lt', alias?: string  } 
  | { name: 'rating_lte', alias?: string  } 
  | { name: 'rating_gt', alias?: string  } 
  | { name: 'rating_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'country', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CountryWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  landmarks_every?: LandmarkWhereInput | null
  landmarks_some?: LandmarkWhereInput | null
  landmarks_none?: LandmarkWhereInput | null
  AND?: CountryWhereInput[]
  OR?: CountryWhereInput[]
  NOT?: CountryWhereInput[]
}
export type CountryWhereInputInputObject =
  | Extract<keyof CountryWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'landmarks_every', alias?: string  } 
  | { name: 'landmarks_some', alias?: string  } 
  | { name: 'landmarks_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LandmarkWhereUniqueInput {
  id?: string | null
}
export type LandmarkWhereUniqueInputInputObject =
  | Extract<keyof LandmarkWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CountryCreateInput {
  id?: string | null
  name?: string
  landmarks?: LandmarkCreateManyWithoutCountryInput | null
}
export type CountryCreateInputInputObject =
  | Extract<keyof CountryCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'landmarks', alias?: string  } 
  
export interface LandmarkCreateManyWithoutCountryInput {
  create?: LandmarkCreateWithoutCountryInput[]
  connect?: LandmarkWhereUniqueInput[]
}
export type LandmarkCreateManyWithoutCountryInputInputObject =
  | Extract<keyof LandmarkCreateManyWithoutCountryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LandmarkCreateWithoutCountryInput {
  id?: string | null
  name?: string
  city_name?: string
  rating?: number | null
}
export type LandmarkCreateWithoutCountryInputInputObject =
  | Extract<keyof LandmarkCreateWithoutCountryInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'city_name', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  
export interface CountryUpdateInput {
  name?: string | null
  landmarks?: LandmarkUpdateManyWithoutCountryInput | null
}
export type CountryUpdateInputInputObject =
  | Extract<keyof CountryUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'landmarks', alias?: string  } 
  
export interface LandmarkUpdateManyWithoutCountryInput {
  create?: LandmarkCreateWithoutCountryInput[]
  delete?: LandmarkWhereUniqueInput[]
  connect?: LandmarkWhereUniqueInput[]
  set?: LandmarkWhereUniqueInput[]
  disconnect?: LandmarkWhereUniqueInput[]
  update?: LandmarkUpdateWithWhereUniqueWithoutCountryInput[]
  upsert?: LandmarkUpsertWithWhereUniqueWithoutCountryInput[]
  deleteMany?: LandmarkScalarWhereInput[]
  updateMany?: LandmarkUpdateManyWithWhereNestedInput[]
}
export type LandmarkUpdateManyWithoutCountryInputInputObject =
  | Extract<keyof LandmarkUpdateManyWithoutCountryInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface LandmarkUpdateWithWhereUniqueWithoutCountryInput {
  where?: LandmarkWhereUniqueInput
  data?: LandmarkUpdateWithoutCountryDataInput
}
export type LandmarkUpdateWithWhereUniqueWithoutCountryInputInputObject =
  | Extract<keyof LandmarkUpdateWithWhereUniqueWithoutCountryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface LandmarkUpdateWithoutCountryDataInput {
  name?: string | null
  city_name?: string | null
  rating?: number | null
}
export type LandmarkUpdateWithoutCountryDataInputInputObject =
  | Extract<keyof LandmarkUpdateWithoutCountryDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'city_name', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  
export interface LandmarkUpsertWithWhereUniqueWithoutCountryInput {
  where?: LandmarkWhereUniqueInput
  update?: LandmarkUpdateWithoutCountryDataInput
  create?: LandmarkCreateWithoutCountryInput
}
export type LandmarkUpsertWithWhereUniqueWithoutCountryInputInputObject =
  | Extract<keyof LandmarkUpsertWithWhereUniqueWithoutCountryInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface LandmarkScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  city_name?: string | null
  city_name_not?: string | null
  city_name_in?: string[]
  city_name_not_in?: string[]
  city_name_lt?: string | null
  city_name_lte?: string | null
  city_name_gt?: string | null
  city_name_gte?: string | null
  city_name_contains?: string | null
  city_name_not_contains?: string | null
  city_name_starts_with?: string | null
  city_name_not_starts_with?: string | null
  city_name_ends_with?: string | null
  city_name_not_ends_with?: string | null
  rating?: number | null
  rating_not?: number | null
  rating_in?: number[]
  rating_not_in?: number[]
  rating_lt?: number | null
  rating_lte?: number | null
  rating_gt?: number | null
  rating_gte?: number | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: LandmarkScalarWhereInput[]
  OR?: LandmarkScalarWhereInput[]
  NOT?: LandmarkScalarWhereInput[]
}
export type LandmarkScalarWhereInputInputObject =
  | Extract<keyof LandmarkScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'city_name', alias?: string  } 
  | { name: 'city_name_not', alias?: string  } 
  | { name: 'city_name_in', alias?: string  } 
  | { name: 'city_name_not_in', alias?: string  } 
  | { name: 'city_name_lt', alias?: string  } 
  | { name: 'city_name_lte', alias?: string  } 
  | { name: 'city_name_gt', alias?: string  } 
  | { name: 'city_name_gte', alias?: string  } 
  | { name: 'city_name_contains', alias?: string  } 
  | { name: 'city_name_not_contains', alias?: string  } 
  | { name: 'city_name_starts_with', alias?: string  } 
  | { name: 'city_name_not_starts_with', alias?: string  } 
  | { name: 'city_name_ends_with', alias?: string  } 
  | { name: 'city_name_not_ends_with', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'rating_not', alias?: string  } 
  | { name: 'rating_in', alias?: string  } 
  | { name: 'rating_not_in', alias?: string  } 
  | { name: 'rating_lt', alias?: string  } 
  | { name: 'rating_lte', alias?: string  } 
  | { name: 'rating_gt', alias?: string  } 
  | { name: 'rating_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LandmarkUpdateManyWithWhereNestedInput {
  where?: LandmarkScalarWhereInput
  data?: LandmarkUpdateManyDataInput
}
export type LandmarkUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof LandmarkUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface LandmarkUpdateManyDataInput {
  name?: string | null
  city_name?: string | null
  rating?: number | null
}
export type LandmarkUpdateManyDataInputInputObject =
  | Extract<keyof LandmarkUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'city_name', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  
export interface CountryUpdateManyMutationInput {
  name?: string | null
}
export type CountryUpdateManyMutationInputInputObject =
  | Extract<keyof CountryUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface LandmarkCreateInput {
  id?: string | null
  name?: string
  city_name?: string
  rating?: number | null
  country?: CountryCreateOneWithoutLandmarksInput
}
export type LandmarkCreateInputInputObject =
  | Extract<keyof LandmarkCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'city_name', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'country', alias?: string  } 
  
export interface CountryCreateOneWithoutLandmarksInput {
  create?: CountryCreateWithoutLandmarksInput | null
  connect?: CountryWhereUniqueInput | null
}
export type CountryCreateOneWithoutLandmarksInputInputObject =
  | Extract<keyof CountryCreateOneWithoutLandmarksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CountryCreateWithoutLandmarksInput {
  id?: string | null
  name?: string
}
export type CountryCreateWithoutLandmarksInputInputObject =
  | Extract<keyof CountryCreateWithoutLandmarksInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface LandmarkUpdateInput {
  name?: string | null
  city_name?: string | null
  rating?: number | null
  country?: CountryUpdateOneRequiredWithoutLandmarksInput | null
}
export type LandmarkUpdateInputInputObject =
  | Extract<keyof LandmarkUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'city_name', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  | { name: 'country', alias?: string  } 
  
export interface CountryUpdateOneRequiredWithoutLandmarksInput {
  create?: CountryCreateWithoutLandmarksInput | null
  update?: CountryUpdateWithoutLandmarksDataInput | null
  upsert?: CountryUpsertWithoutLandmarksInput | null
  connect?: CountryWhereUniqueInput | null
}
export type CountryUpdateOneRequiredWithoutLandmarksInputInputObject =
  | Extract<keyof CountryUpdateOneRequiredWithoutLandmarksInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CountryUpdateWithoutLandmarksDataInput {
  name?: string | null
}
export type CountryUpdateWithoutLandmarksDataInputInputObject =
  | Extract<keyof CountryUpdateWithoutLandmarksDataInput, string>
  | { name: 'name', alias?: string  } 
  
export interface CountryUpsertWithoutLandmarksInput {
  update?: CountryUpdateWithoutLandmarksDataInput
  create?: CountryCreateWithoutLandmarksInput
}
export type CountryUpsertWithoutLandmarksInputInputObject =
  | Extract<keyof CountryUpsertWithoutLandmarksInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface LandmarkUpdateManyMutationInput {
  name?: string | null
  city_name?: string | null
  rating?: number | null
}
export type LandmarkUpdateManyMutationInputInputObject =
  | Extract<keyof LandmarkUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'city_name', alias?: string  } 
  | { name: 'rating', alias?: string  } 
  
export interface CountrySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CountryWhereInput | null
  AND?: CountrySubscriptionWhereInput[]
  OR?: CountrySubscriptionWhereInput[]
  NOT?: CountrySubscriptionWhereInput[]
}
export type CountrySubscriptionWhereInputInputObject =
  | Extract<keyof CountrySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LandmarkSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: LandmarkWhereInput | null
  AND?: LandmarkSubscriptionWhereInput[]
  OR?: LandmarkSubscriptionWhereInput[]
  NOT?: LandmarkSubscriptionWhereInput[]
}
export type LandmarkSubscriptionWhereInputInputObject =
  | Extract<keyof LandmarkSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type LandmarkOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'city_name_ASC'
  | 'city_name_DESC'
  | 'rating_ASC'
  | 'rating_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CountryOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  